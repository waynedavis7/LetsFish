@page "/captains"
@using LetsFish.Application.Domain.Entities
@inject HttpClient Http
@inject ISnackbar Snackbar

@if (captains == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="container">
        <div class="row">
            <MudDataGrid Items="@captainsFilteredQuery" T="Captain" Dense Striped ReadOnly="false" CommittedItemChanges="@CommittedItemChanges">
                <ToolBarContent>
                    <MudButton DisableElevation Variant="Variant.Filled" Color="Color.Primary" OnClick="(() => AddNew())" StartIcon="@Icons.Material.Filled.Add" IconColor="Color.Surface">Add</MudButton>
                    <MudText Typo="Typo.h6">Captains</MudText>
                    <MudSpacer />
                    <MudFocusTrap Disabled="false" DefaultFocus="DefaultFocus.FirstChild">
                        <MudTextField @bind-Value="_searchString" OnKeyUp="@SearchTextChanged" Immediate="true"
                                      Placeholder="Search for Captains" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0 mb-3"></MudTextField>
                    </MudFocusTrap>
                </ToolBarContent>
                <Columns>
                    <PropertyColumn Property="x => x.FirstName" />
                    <PropertyColumn Property="x => x.LastName" />
                    <PropertyColumn Property="x => x.Email" />
                    <PropertyColumn Property="x => x.Phone" />
                    <PropertyColumn Property="x => x.Inactive">
                        <EditTemplate>
                            <MudCheckBox @bind-Value="context.Item.Inactive" Label="Inactive" />
                        </EditTemplate>
                    </PropertyColumn>

                    <TemplateColumn CellClass="d-flex justify-end">
                        <CellTemplate>
                            <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Edit" OnClick="@context.Actions.StartEditingItemAsync" />
                        </CellTemplate>
                    </TemplateColumn>
                </Columns>
            </MudDataGrid>
        </div>
    </div>
}
@code {

}

@code {
    private string _searchString = "";

    private Captain[]? captains;
    private IQueryable<Captain>? captainsQuery;
    private IQueryable<Captain>? captainsFilteredQuery;
    private Captain captain = new Captain();

    protected override async Task OnInitializedAsync()
    {
        var response = await Http.GetFromJsonAsync<Result<List<Captain>>>("api/v1/Captains");

        if (response == null || response.Data is null)
        {
            Snackbar.Add($"Error Loading Captains", Severity.Error);
            return;
        }

        captains = response.Data.ToArray();
        captainsQuery = response.Data.AsQueryable();
        captainsFilteredQuery = captainsQuery;
    }

    private void SearchTextChanged(KeyboardEventArgs e)
    {
        GetCaptainsAsync();
    }

    private void GetCaptainsAsync()
    {
        if(captainsQuery != null)
        {
            captainsFilteredQuery = captainsQuery.Where(x => x.FirstName.ToLower().Contains(_searchString.ToLower()) ||
                                                        x.LastName.ToLower().Contains(_searchString.ToLower()) ||
                                                        x.Email.ToLower().Contains(_searchString.ToLower()) ||
                                                        x.Phone.Contains(_searchString));
            StateHasChanged();
        }
        
    }

    async Task CommittedItemChanges(Captain item)
    {
        var response = await Http.PostAsJsonAsync("api/v1/Captains", item);
        Snackbar.Add($"Captain saved", Severity.Normal);
    }

    void AddNew()
    {
        if(captainsQuery != null)
        {
            captainsQuery = captainsQuery.Append(new Captain());
            captainsFilteredQuery = captainsQuery.Where(x => x.CaptainId == 0);
            StateHasChanged();
        }        
    }
}